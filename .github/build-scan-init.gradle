//
// Setup Gradle Build Scans for this Project
// with a special hook to place the Build Scan URI
// onto a GitHub Actions job step output variable
// called `buildScanUri`.
//
import com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin
import com.gradle.scan.plugin.BuildScanPlugin
import com.gradle.scan.plugin.PublishedBuildScan
import org.gradle.util.GradleVersion

initscript {
    def pluginVersion = "3.2"

    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath("com.gradle:gradle-enterprise-gradle-plugin:${pluginVersion}")
    }
}

def isTopLevelBuild = gradle.getParent() == null

if (isTopLevelBuild) {
    def gradleVersion = GradleVersion.current().baseVersion
    def atLeastGradle5 = gradleVersion >= GradleVersion.version("5.0")
    def atLeastGradle6 = gradleVersion >= GradleVersion.version("6.0")

    if (atLeastGradle6) {
        settingsEvaluated {
            if (!it.pluginManager.hasPlugin("com.gradle.enterprise")) {
                it.pluginManager.apply(GradleEnterprisePlugin)
            }
            configureExtension(it.extensions["gradleEnterprise"])
        }
    } else if (atLeastGradle5) {
        rootProject {
            pluginManager.apply(BuildScanPlugin)
            configureExtension(extensions["gradleEnterprise"])
        }
    }
}

void configureExtension(extension) {
    extension.buildScan.with {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
        
        //
        // After the build scan is published, put on STDOUT the special
        // GitHub Actions syntax to set an Output Variable for the job
        // step:
        //
        //     ::set-output name={variable}::{value}
        //
        // ref: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
        //
        buildScanPublished { PublishedBuildScan scan ->
            println "::set-output name=buildScanUri::${scan.buildScanUri}\n"
        }
    }
}
