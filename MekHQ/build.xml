<?xml version="1.0" encoding="UTF-8"?>
<!-- This is an ant build file. See: "http://jakarta.apache.org/ant"-->
<project default="jar" name="MekHQ">
    <!-- Global properties for this build -->
    <property name="src" value="src"/>
    <property name="build" value="${basedir}/classes"/>
    <property name="mekhq" value="MekHQ.jar"/>
    <property name="jarmanifest" value="manifest.txt"/>
    <property name="libdir" value="lib"/>
    <property name="libdir.test" value="lib-test"/>
    <property name="dir.build.test" location="${build}/test"/>
    <property name="dir.test.src" location="unittests"/>
    <property name="dir.build.teststaging" location="${build}/teststaging"/>
    <property name="dir.build.testreport" location="${build}/testreport"/>
    <property name="class.main" value="mekhq.MekHQ"/>
    <property name="megamek" value="MegaMek.jar"/>
    <property name="megameklab" value="MegaMekLab.jar"/>

    <path id="project.classpath">
        <pathelement path="${build}">
        </pathelement>
        <fileset dir="${libdir}" includes="*.jar"/>
        <fileset dir="${basedir}">
            <include
                    name="MegaMek.jar" >
            </include>
            <include
                    name="MegaMekLab.jar">
            </include>
        </fileset>
    </path>

    <path id="classpath">
        <fileset dir="${libdir}" includes="*.jar"/>
    </path>
    <path id="classpath.compile-unittest">
        <path refid="classpath"/>
        <pathelement location="${build}"/>
        <fileset dir="${libdir.test}"/>
        <fileset dir="${basedir}">
            <include
                    name="MegaMek.jar"
                    >
            </include>
            <include
                    name="MegaMekLab.jar">
            </include>
        </fileset>
    </path>
    <path id="classpath.run-unittest">
        <path refid="classpath.compile-unittest"/>
        <pathelement location="${dir.build.test}"/>
    </path>

    <!-- Runtime classpath to be added to the jar manifest's class-path. -->
    <path id="classpath.runtime">
        <fileset dir="${basedir}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>
    <pathconvert property="classpath.manifest" pathsep=" ">
        <path refid="classpath.runtime"/>
        <mapper>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*.jar" to="lib/*.jar"/>
            </chainedmapper>
        </mapper>
    </pathconvert>

    <target depends="clean" description="Initialize system before build" name="init">
        <!-- Create the time stamp -->
        <tstamp>
        </tstamp>
        <!-- Ensure that the build directory exists. -->
        <mkdir dir="${build}">
        </mkdir>
    </target>
    <target depends="init" description="Compile java sources into class files" name="compile">
        <javac
                classpathref="project.classpath"
                debug="true"
                deprecation="true"
                destdir="${build}"
                srcdir="${src}"
                target="1.8"
                source="1.8"
                encoding="UTF-8"
                >
        </javac>
    </target>
    <target description="Remove all compiled and generated files" name="clean">
        <!-- Delete the ${build} directory tree -->
        <delete file="${mekhq}">
        </delete>
        <delete dir="${build}">
        </delete>
    </target>
    <target
            depends="compile,unit.test"
            description="Create application jar file"
            name="jar"
            >
        <delete file="${mekhq}">
        </delete>
        <jar
                basedir="${build}"
                compress="true"
                destfile="${mekhq}"
                excludes=""
                includes="**"
                jarfile="${mekhq}"
                >
            <!-- Auto-generate the manifest file. -->
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${class.main}"/>
                <attribute name="Class-Path" value=". ${classpath.manifest} ${megamek} ${megameklab}"/>
            </manifest>
            <fileset dir="${src}" includes="**/*.properties"/>
			<metainf dir="${src}/META-INF" includes="services/**"/>
        </jar>
        <echo message="Built-By: ${user.name}"/>
        <echo message="Main-Class: ${class.main}"/>
        <echo message="Class-Path: ${classpath.manifest}"/>
    </target>

    <target name="compileTests" depends="compile" unless="skip.tests">
        <delete dir="${dir.build.test}"/>
        <mkdir dir="${dir.build.test}"/>

        <copy todir="${dir.build.test}">
            <fileset dir="${src}">
                <include name="**/*.properties" />
            </fileset>
        </copy>

        <copy todir="${dir.build.test}" overwrite="true">
            <fileset dir="${dir.test.src}">
                <include name="**/*.properties" />
            </fileset>
        </copy>

        <javac srcdir="${dir.test.src}" destdir="${dir.build.test}" encoding="UTF-8" includeantruntime="false" debug="true">
            <classpath refid="classpath.compile-unittest"/>
        </javac>
    </target>

    <target depends="compileTests" name="unit.test" unless="${skip.tests}">
        <delete dir="${dir.build.teststaging}"/>
        <delete dir="${dir.build.testreport}"/>
        <mkdir dir="${dir.build.teststaging}"/>
        <mkdir dir="${dir.build.testreport}"/>

        <junit fork="true" maxmemory="256m" showoutput="true" printsummary="yes" forkmode="once" haltonfailure="true"
               haltonerror="true" failureproperty="tests.failed">
            <classpath refid="classpath.run-unittest"/>
            <formatter type="xml" usefile="true"/>
            <batchtest fork="true" todir="${dir.build.teststaging}">
                <fileset dir="${dir.build.test}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${dir.build.testreport}">
            <fileset dir="${dir.build.teststaging}">
                <include name="TEST-*.xml"/>
            </fileset>
        </junitreport>
    </target>
</project>
